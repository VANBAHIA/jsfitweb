const fs = require('fs');
const path = require('path');

// Caminho do arquivo
const DATABASE_PATH = path.join(__dirname, 'DATABASE.JSON');
const OUTPUT_PATH = path.join(__dirname, 'DATABASE_FIXED.JSON');

console.log('üîß Corrigindo arquivo DATABASE.JSON...\n');

try {
  // Ler o arquivo original
  const rawContent = fs.readFileSync(DATABASE_PATH, 'utf-8');
  
  // Limpar e preparar o conte√∫do
  let content = rawContent.trim();
  
  // Se n√£o come√ßar com [, adicionar
  if (!content.startsWith('[')) {
    content = '[' + content;
  }
  
  // Se n√£o terminar com ], adicionar
  if (!content.endsWith(']')) {
    content = content + ']';
  }
  
  // Tentar fazer o parse
  console.log('üìù Tentando fazer parse do JSON...');
  const data = JSON.parse(content);
  
  console.log(`‚úÖ JSON v√°lido! Encontrados ${data.length} exerc√≠cios\n`);
  
  // Extrair grupos √∫nicos
  const gruposSet = new Set();
  data.forEach(ex => {
    if (ex.grupo) {
      gruposSet.add(ex.grupo.trim().toUpperCase());
    }
  });
  
  const grupos = Array.from(gruposSet).sort().map((nome, index) => ({
    nome,
    codigo: `GRP${String(index + 1).padStart(3, '0')}`
  }));
  
  console.log(`üìã Grupos encontrados: ${grupos.length}`);
  grupos.forEach(g => console.log(`   - ${g.nome}`));
  
  // Criar estrutura final
  const estruturaFinal = {
    grupos: grupos,
    exercicios: data.map((ex, index) => ({
      ...ex,
      codigo: ex.codigo || `EXE${String(index + 1).padStart(3, '0')}`
    }))
  };
  
  // Salvar arquivo corrigido
  fs.writeFileSync(
    OUTPUT_PATH,
    JSON.stringify(estruturaFinal, null, 2),
    'utf-8'
  );
  
  console.log(`\n‚úÖ Arquivo corrigido salvo em: ${OUTPUT_PATH}`);
  console.log(`\nüìä Estat√≠sticas:`);
  console.log(`   - Grupos: ${grupos.length}`);
  console.log(`   - Exerc√≠cios: ${data.length}`);
  
  console.log(`\nüí° Pr√≥ximos passos:`);
  console.log(`   1. Renomeie DATABASE.JSON para DATABASE_OLD.JSON (backup)`);
  console.log(`   2. Renomeie DATABASE_FIXED.JSON para DATABASE.JSON`);
  console.log(`   3. Execute: npm run seed`);
  
} catch (error) {
  console.error('‚ùå Erro ao processar arquivo:', error.message);
  console.error('\nüîç Detalhes do erro:');
  console.error(error);
  
  // Tentar identificar o problema
  console.log('\nüîß Diagn√≥stico:');
  const content = fs.readFileSync(DATABASE_PATH, 'utf-8');
  console.log(`   - Tamanho do arquivo: ${content.length} caracteres`);
  console.log(`   - Primeira linha: ${content.substring(0, 100)}...`);
  console.log(`   - √öltimas linhas: ...${content.substring(content.length - 100)}`);
  
  process.exit(1);
}