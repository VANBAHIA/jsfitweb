// src/controllers/avaliacaoFisicaController.js
const avaliacaoFisicaService = require('../services/avaliacaoFisicaService');
const ApiResponse = require('../utils/apiResponse');
const ApiError = require('../utils/apiError');

class AvaliacaoFisicaController {
  
  /**
   * Criar nova avalia√ß√£o f√≠sica
   * @route POST /api/avaliacoes-fisicas
   */
  async criar(req, res) {
    try {
      const dados = req.body;
      const empresaId = req.empresaId;

      console.log('üìã Controller recebeu:', {
        empresaId,
        alunoId: dados.alunoId,
        peso: dados.peso,
        altura: dados.altura
      });

      if (!empresaId) {
        throw new ApiError(401, 'Usu√°rio n√£o autenticado ou empresaId ausente');
      }

      const avaliacao = await avaliacaoFisicaService.criar(dados, empresaId);

      res.status(201).json(
        new ApiResponse(201, avaliacao, 'Avalia√ß√£o f√≠sica criada com sucesso')
      );
    } catch (error) {
      console.error('‚ùå Erro ao criar avalia√ß√£o f√≠sica:', error);
      
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao criar avalia√ß√£o f√≠sica',
        error: error.message
      });
    }
  }

  /**
   * Listar todas as avalia√ß√µes f√≠sicas
   * @route GET /api/avaliacoes-fisicas
   */
  async listarTodos(req, res) {
    try {
      const { alunoId, dataInicio, dataFim, status, page, limit } = req.query;
      const empresaId = req.empresaId;

      const resultado = await avaliacaoFisicaService.listarTodos({
        empresaId,
        alunoId,
        dataInicio,
        dataFim,
        status,
        skip: page ? (Number(page) - 1) * Number(limit || 10) : 0,
        take: limit ? Number(limit) : 10
      });

      res.status(200).json(
        new ApiResponse(200, resultado, 'Avalia√ß√µes f√≠sicas listadas com sucesso')
      );
    } catch (error) {
      console.error('‚ùå Erro ao listar avalia√ß√µes:', error);
      
      res.status(500).json({
        success: false,
        message: 'Erro ao listar avalia√ß√µes f√≠sicas',
        error: error.message
      });
    }
  }

  /**
   * Buscar avalia√ß√£o f√≠sica por ID
   * @route GET /api/avaliacoes-fisicas/:id
   */
  async buscarPorId(req, res) {
    try {
      const { id } = req.params;
      const empresaId = req.empresaId;

      const avaliacao = await avaliacaoFisicaService.buscarPorId(id, empresaId);

      res.status(200).json(
        new ApiResponse(200, avaliacao, 'Avalia√ß√£o f√≠sica encontrada')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao buscar avalia√ß√£o f√≠sica',
        error: error.message
      });
    }
  }

  /**
   * Buscar hist√≥rico de avalia√ß√µes de um aluno
   * @route GET /api/avaliacoes-fisicas/aluno/:alunoId
   */
  async buscarPorAluno(req, res) {
    try {
      const { alunoId } = req.params;
      const empresaId = req.empresaId;

      const avaliacoes = await avaliacaoFisicaService.buscarPorAluno(alunoId, empresaId);

      res.status(200).json(
        new ApiResponse(200, avaliacoes, 'Hist√≥rico de avalia√ß√µes do aluno')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao buscar hist√≥rico',
        error: error.message
      });
    }
  }

  /**
   * Atualizar avalia√ß√£o f√≠sica
   * @route PUT /api/avaliacoes-fisicas/:id
   */
  async atualizar(req, res) {
    try {
      const { id } = req.params;
      const dados = req.body;
      const empresaId = req.empresaId;

      const avaliacao = await avaliacaoFisicaService.atualizar(id, dados, empresaId);

      res.status(200).json(
        new ApiResponse(200, avaliacao, 'Avalia√ß√£o f√≠sica atualizada com sucesso')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao atualizar avalia√ß√£o f√≠sica',
        error: error.message
      });
    }
  }

  /**
   * Deletar avalia√ß√£o f√≠sica
   * @route DELETE /api/avaliacoes-fisicas/:id
   */
  async deletar(req, res) {
    try {
      const { id } = req.params;
      const empresaId = req.empresaId;

      await avaliacaoFisicaService.deletar(id, empresaId);

      res.status(200).json(
        new ApiResponse(200, null, 'Avalia√ß√£o f√≠sica deletada com sucesso')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao deletar avalia√ß√£o f√≠sica',
        error: error.message
      });
    }
  }

  /**
   * Buscar evolu√ß√£o do aluno
   * @route GET /api/avaliacoes-fisicas/aluno/:alunoId/evolucao
   */
  async buscarEvolucao(req, res) {
    try {
      const { alunoId } = req.params;
      const empresaId = req.empresaId;
      
      // Par√¢metros opcionais para filtrar quais dados exibir na evolu√ß√£o
      const parametros = req.query.parametros 
        ? req.query.parametros.split(',')
        : ['peso', 'imc', 'percentualGordura', 'massaMagra', 'massaGorda'];

      const evolucao = await avaliacaoFisicaService.buscarEvolucao(
        alunoId, 
        empresaId, 
        parametros
      );

      res.status(200).json(
        new ApiResponse(200, evolucao, 'Evolu√ß√£o do aluno')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao buscar evolu√ß√£o',
        error: error.message
      });
    }
  }

  /**
   * Comparar duas avalia√ß√µes
   * @route GET /api/avaliacoes-fisicas/comparar/:avaliacaoAnteriorId/:avaliacaoAtualId
   */
  async compararAvaliacoes(req, res) {
    try {
      const { avaliacaoAnteriorId, avaliacaoAtualId } = req.params;
      const empresaId = req.empresaId;

      const comparacao = await avaliacaoFisicaService.compararAvaliacoes(
        avaliacaoAnteriorId,
        avaliacaoAtualId,
        empresaId
      );

      res.status(200).json(
        new ApiResponse(200, comparacao, 'Compara√ß√£o de avalia√ß√µes')
      );
    } catch (error) {
      if (error instanceof ApiError) {
        return res.status(error.statusCode).json({
          success: false,
          message: error.message
        });
      }

      res.status(500).json({
        success: false,
        message: 'Erro ao comparar avalia√ß√µes',
        error: error.message
      });
    }
  }
}

module.exports = new AvaliacaoFisicaController();