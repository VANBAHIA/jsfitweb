const cron = require('node-cron');
const gerarCobrancasJob = require('./gerarCobrancasRecorrentes');
const frequenciaJob = require('./frequenciaJob');
const pmx = require('@pm2/io'); // üîß Necess√°rio para permitir comandos via PM2 Trigger

class JobScheduler {
  
  iniciar() {
    console.log('üìÖ [SCHEDULER] Iniciando agendamento de jobs...');
    
    // üîπ Executa rotina de frequ√™ncia autom√°tica
    frequenciaJob.registrarFaltasAutomaticas();

    // üîπ Registra a√ß√£o manual via PM2 Trigger
    pmx.action('executarManualmente', async (reply) => {
      console.log('üîß [SCHEDULER] Execu√ß√£o manual solicitada via PM2 Trigger...');
      try {
        const resultado = await gerarCobrancasJob.executar();
        reply({ status: 'ok', mensagem: 'Job executado manualmente com sucesso!', resultado });
      } catch (error) {
        console.error('‚ùå [SCHEDULER] Erro ao executar job manualmente:', error);
        reply({ status: 'erro', mensagem: error.message });
      }
    });

    // üîπ Job principal ‚Äì gerar cobran√ßas √†s 00:00 (meia-noite)
    cron.schedule('0 0 * * *', async () => {
      console.log('‚è∞ [SCHEDULER] Executando job de cobran√ßas - ' + new Date().toISOString());
      
      try {
        await gerarCobrancasJob.executar();
      } catch (error) {
        console.error('‚ùå [SCHEDULER] Erro ao executar job autom√°tico:', error);
      }
    }, {
      timezone: 'America/Sao_Paulo'
    });

    // üîπ Job secund√°rio ‚Äì atualizar contas vencidas √†s 01:00
    cron.schedule('0 1 * * *', async () => {
      console.log('‚è∞ [SCHEDULER] Atualizando contas vencidas...');
      
      const contaReceberService = require('../services/contaReceberService');
      try {
        await contaReceberService.atualizarStatusVencidas();
      } catch (error) {
        console.error('‚ùå [SCHEDULER] Erro ao atualizar vencidas:', error);
      }
    }, {
      timezone: 'America/Sao_Paulo'
    });

    console.log('‚úÖ [SCHEDULER] Jobs agendados com sucesso!');
  }

  // üîπ Execu√ß√£o manual direta (sem PM2)
  async executarManualmente() {
    console.log('üîß [SCHEDULER] Execu√ß√£o manual do job iniciada...');
    return await gerarCobrancasJob.executar();
  }

}

module.exports = new JobScheduler();
